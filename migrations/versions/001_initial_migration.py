"""Initial migration

Revision ID: 001
Revises: 
Create Date: 2025-01-18 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create patients table
    op.create_table('patients',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('phone_e164', sa.Text(), nullable=False),
        sa.Column('tags', postgresql.ARRAY(sa.Text()), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('phone_e164')
    )
    
    # Create wa_campaigns table
    op.create_table('wa_campaigns',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('template_name', sa.Text(), nullable=False),
        sa.Column('lang_code', sa.Text(), nullable=False),
        sa.Column('params_mode', sa.Text(), nullable=False),
        sa.Column('fixed_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('tz', sa.Text(), nullable=False),
        sa.Column('start_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('end_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('frequency', sa.Text(), nullable=False),
        sa.Column('days_of_week', postgresql.ARRAY(sa.Integer()), nullable=True),
        sa.Column('day_of_month', sa.Integer(), nullable=True),
        sa.Column('send_time', sa.Time(), nullable=False),
        sa.Column('cron_expr', sa.Text(), nullable=True),
        sa.Column('status', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("params_mode IN ('fixed', 'per_recipient')", name='check_params_mode'),
        sa.CheckConstraint("frequency IN ('once', 'daily', 'weekly', 'monthly', 'cron')", name='check_frequency'),
        sa.CheckConstraint("status IN ('active', 'paused', 'done')", name='check_status'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create wa_campaign_recipients table
    op.create_table('wa_campaign_recipients',
        sa.Column('campaign_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('phone_e164', sa.Text(), nullable=False),
        sa.Column('per_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['campaign_id'], ['wa_campaigns.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('campaign_id', 'phone_e164')
    )
    
    # Create wa_campaign_runs table
    op.create_table('wa_campaign_runs',
        sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column('campaign_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('run_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('phone_e164', sa.Text(), nullable=False),
        sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('wa_response', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status', sa.Text(), nullable=False),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.CheckConstraint("status IN ('ok', 'error', 'skipped')", name='check_run_status'),
        sa.ForeignKeyConstraint(['campaign_id'], ['wa_campaigns.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create indexes for better performance
    op.create_index('idx_patients_phone', 'patients', ['phone_e164'])
    op.create_index('idx_patients_active', 'patients', ['active'])
    op.create_index('idx_campaigns_status', 'wa_campaigns', ['status'])
    op.create_index('idx_campaigns_frequency', 'wa_campaigns', ['frequency'])
    op.create_index('idx_campaigns_start_at', 'wa_campaigns', ['start_at'])
    op.create_index('idx_campaign_runs_campaign_id', 'wa_campaign_runs', ['campaign_id'])
    op.create_index('idx_campaign_runs_run_at', 'wa_campaign_runs', ['run_at'])
    op.create_index('idx_campaign_runs_status', 'wa_campaign_runs', ['status'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop indexes
    op.drop_index('idx_campaign_runs_status')
    op.drop_index('idx_campaign_runs_run_at')
    op.drop_index('idx_campaign_runs_campaign_id')
    op.drop_index('idx_campaigns_start_at')
    op.drop_index('idx_campaigns_frequency')
    op.drop_index('idx_campaigns_status')
    op.drop_index('idx_patients_active')
    op.drop_index('idx_patients_phone')
    
    # Drop tables
    op.drop_table('wa_campaign_runs')
    op.drop_table('wa_campaign_recipients')
    op.drop_table('wa_campaigns')
    op.drop_table('patients')
    
    # ### end Alembic commands ###

