#!/usr/bin/env python3
"""
Script para for√ßar cria√ß√£o de tabelas na inicializa√ß√£o da aplica√ß√£o
"""

def add_force_create_tables():
    """Adiciona c√≥digo para for√ßar cria√ß√£o de tabelas na inicializa√ß√£o"""
    
    # L√™ o arquivo main.py atual
    with open('src/main.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # C√≥digo para for√ßar cria√ß√£o de tabelas
    force_create_code = '''
    # FOR√áA CRIA√á√ÉO DE TABELAS (ADICIONADO AUTOMATICAMENTE)
    try:
        with app.app_context():
            # For√ßa cria√ß√£o de todas as tabelas
            db.create_all()
            
            # Verifica se as tabelas foram criadas
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            
            logger.info(f"‚úÖ Tabelas dispon√≠veis: {tables}")
            
            # Verifica tabelas essenciais
            essential_tables = ['patients', 'responses', 'schedules']
            missing_tables = [t for t in essential_tables if t not in tables]
            
            if missing_tables:
                logger.warning(f"‚ö†Ô∏è Tabelas ausentes: {missing_tables}")
                # Tenta criar novamente
                db.create_all()
                logger.info("üîÑ Tentativa adicional de cria√ß√£o de tabelas")
            else:
                logger.info("‚úÖ Todas as tabelas essenciais est√£o presentes")
                
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar tabelas: {e}")
        # Continua mesmo com erro para n√£o quebrar a aplica√ß√£o
'''
    
    # Encontra onde inserir o c√≥digo (ap√≥s a cria√ß√£o do app e antes do if __name__)
    lines = content.split('\n')
    
    # Procura pela linha que cont√©m "create_tables()" ou similar
    insert_index = -1
    for i, line in enumerate(lines):
        if 'create_tables()' in line and 'def ' not in line:
            insert_index = i + 1
            break
    
    if insert_index == -1:
        # Se n√£o encontrar, procura por "if __name__ == '__main__':"
        for i, line in enumerate(lines):
            if 'if __name__ == ' in line:
                insert_index = i
                break
    
    if insert_index == -1:
        # Se ainda n√£o encontrar, adiciona no final
        insert_index = len(lines)
    
    # Insere o c√≥digo
    lines.insert(insert_index, force_create_code)
    
    # Escreve o arquivo atualizado
    with open('src/main.py', 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))
    
    print("‚úÖ C√≥digo de cria√ß√£o for√ßada de tabelas adicionado ao main.py")
    return True

def main():
    """Fun√ß√£o principal"""
    print("üîß FOR√áANDO CRIA√á√ÉO DE TABELAS NA INICIALIZA√á√ÉO")
    print("=" * 60)
    
    try:
        success = add_force_create_tables()
        
        if success:
            print("‚úÖ Modifica√ß√£o aplicada com sucesso!")
            print("\nüìã PR√ìXIMOS PASSOS:")
            print("1. git add src/main.py")
            print("2. git commit -m 'Force table creation on startup'")
            print("3. git push origin main")
            print("4. Aguardar deploy do Railway")
            print("5. Testar registro de paciente")
            
            print("\nüîç O QUE FOI FEITO:")
            print("‚Ä¢ Adicionado c√≥digo para criar tabelas automaticamente")
            print("‚Ä¢ Verifica√ß√£o de tabelas essenciais")
            print("‚Ä¢ Logs detalhados para debug")
            print("‚Ä¢ Tratamento de erros para n√£o quebrar a aplica√ß√£o")
        else:
            print("‚ùå Falha ao aplicar modifica√ß√£o")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False
    
    return success

if __name__ == "__main__":
    main()
