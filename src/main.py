import os
import json
import requests
from datetime import datetime
from flask import Flask, request, jsonify

# Carregar vari√°veis de ambiente do arquivo .env
from dotenv import load_dotenv
load_dotenv()

app = Flask(__name__)

# Configura√ß√µes WhatsApp
WHATSAPP_ACCESS_TOKEN = os.getenv('WHATSAPP_ACCESS_TOKEN')
WHATSAPP_PHONE_NUMBER_ID = os.getenv('WHATSAPP_PHONE_NUMBER_ID')
WHATSAPP_WEBHOOK_VERIFY_TOKEN = os.getenv('WHATSAPP_WEBHOOK_VERIFY_TOKEN')

# Estado dos question√°rios (em produ√ß√£o seria banco de dados)
questionnaire_states = {}

# Perguntas GAD-7
GAD7_QUESTIONS = [
    "Sentir-se nervoso, ansioso ou muito tenso?",
    "N√£o conseguir parar ou controlar as preocupa√ß√µes?",
    "Preocupar-se muito com diversas coisas?",
    "Ter dificuldade para relaxar?",
    "Ficar t√£o agitado que se torna dif√≠cil permanecer parado?",
    "Ficar facilmente aborrecido ou irritado?",
    "Sentir medo como se algo terr√≠vel fosse acontecer?"
]

# Significados das respostas
RESPONSE_MEANINGS = {
    "0": "Nenhuma vez",
    "1": "V√°rios dias",
    "2": "Mais da metade dos dias",
    "3": "Quase todos os dias"
}

def send_whatsapp_message(phone_number, message_text):
    """Envia mensagem de texto via WhatsApp com logs detalhados"""
    print(f"üîÑ Attempting to send message to {phone_number}")
    print(f"üìù Message length: {len(message_text)} characters")
    
    if not WHATSAPP_ACCESS_TOKEN or not WHATSAPP_PHONE_NUMBER_ID:
        print("‚ùå WhatsApp credentials not configured")
        print(f"Token exists: {bool(WHATSAPP_ACCESS_TOKEN)}")
        print(f"Phone ID exists: {bool(WHATSAPP_PHONE_NUMBER_ID)}")
        return False
    
    url = f"https://graph.facebook.com/v18.0/{WHATSAPP_PHONE_NUMBER_ID}/messages"
    print(f"üåê API URL: {url}")
    
    headers = {
        'Authorization': f'Bearer {WHATSAPP_ACCESS_TOKEN[:20]}...',  # Log partial token
        'Content-Type': 'application/json'
    }
    
    data = {
        "messaging_product": "whatsapp",
        "to": phone_number,
        "type": "text",
        "text": {"body": message_text}
    }
    
    print(f"üì§ Sending data: {json.dumps(data, indent=2)}")
    
    # Tentar enviar at√© 3 vezes
    for attempt in range(3):
        try:
            print(f"üîÑ Attempt {attempt + 1}/3")
            response = requests.post(url, headers=headers, json=data, timeout=30)
            
            print(f"üìä Response status: {response.status_code}")
            print(f"üìù Response headers: {dict(response.headers)}")
            print(f"üìÑ Response body: {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                message_id = result.get('messages', [{}])[0].get('id', 'unknown')
                print(f"‚úÖ Message sent successfully to {phone_number} - ID: {message_id}")
                return True
            else:
                print(f"‚ùå Error sending message: {response.status_code}")
                print(f"Error details: {response.text}")
                
                # Se for erro 400, n√£o tentar novamente
                if response.status_code == 400:
                    break
                    
        except Exception as e:
            print(f"üí• Exception on attempt {attempt + 1}: {e}")
            if attempt == 2:  # √öltima tentativa
                return False
            
        # Aguardar antes da pr√≥xima tentativa
        if attempt < 2:
            import time
            time.sleep(2)
    
    print(f"‚ùå Failed to send message after 3 attempts")
    return False

def send_whatsapp_buttons(phone_number, message_text, buttons):
    """Envia mensagem com bot√µes via WhatsApp"""
    if not WHATSAPP_ACCESS_TOKEN or not WHATSAPP_PHONE_NUMBER_ID:
        print("‚ùå WhatsApp credentials not configured")
        return False
    
    url = f"https://graph.facebook.com/v18.0/{WHATSAPP_PHONE_NUMBER_ID}/messages"
    
    headers = {
        'Authorization': f'Bearer {WHATSAPP_ACCESS_TOKEN}',
        'Content-Type': 'application/json'
    }
    
    data = {
        "messaging_product": "whatsapp",
        "to": phone_number,
        "type": "interactive",
        "interactive": {
            "type": "button",
            "body": {"text": message_text},
            "action": {
                "buttons": buttons
            }
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            message_id = result.get('messages', [{}])[0].get('id', 'unknown')
            print(f"‚úÖ Interactive message sent to {phone_number} - ID: {message_id}")
            return True
        else:
            print(f"‚ùå Error sending interactive message: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"üí• Exception sending interactive message: {e}")
        return False

def send_gad7_invitation(phone_number):
    """Envia convite para GAD-7 com bot√µes"""
    message_text = """Ol√°! Sou o assistente da *Cl√≠nica Dr. Guilherme*.

Vamos preencher a escala GAD-7 para monitorar como ficou a sua ansiedade?

O question√°rio tem 7 perguntas r√°pidas sobre as √∫ltimas 2 semanas."""
    
    buttons = [
        {
            "type": "reply",
            "reply": {
                "id": "start_gad7",
                "title": "üöÄ COME√áAR"
            }
        },
        {
            "type": "reply",
            "reply": {
                "id": "stop_gad7",
                "title": "‚èπÔ∏è PARAR"
            }
        }
    ]
    
    return send_whatsapp_buttons(phone_number, message_text, buttons)

def start_gad7_questionnaire(phone_number):
    """Inicia question√°rio GAD-7 ap√≥s clique em COME√áAR"""
    questionnaire_states[phone_number] = {
        'type': 'gad7',
        'current_question': 0,
        'responses': [],
        'started_at': datetime.now().isoformat()
    }
    
    print(f"üöÄ Starting GAD-7 for {phone_number}")
    
    # Enviar instru√ß√µes e primeira pergunta juntas
    complete_message = """üìã *INSTRU√á√ïES GAD-7*

Para cada pergunta, responda APENAS O N√öMERO:
‚Ä¢ 0 = Nenhuma vez
‚Ä¢ 1 = V√°rios dias  
‚Ä¢ 2 = Mais da metade dos dias
‚Ä¢ 3 = Quase todos os dias

Digite *cancelar* a qualquer momento para interromper.

---

*PERGUNTA 1/7*

Nas √∫ltimas 2 semanas, com que frequ√™ncia voc√™ percebeu-se incomodado por:

*Sentir-se nervoso, ansioso ou muito tenso?*

Responda apenas o n√∫mero: 0, 1, 2 ou 3"""
    
    print(f"üì§ Sending complete message to {phone_number}")
    result = send_whatsapp_message(phone_number, complete_message)
    print(f"üìä Send result: {result}")
    
    return result

def cancel_questionnaire(phone_number):
    """Cancela question√°rio em andamento"""
    if phone_number in questionnaire_states:
        del questionnaire_states[phone_number]
        print(f"‚èπÔ∏è Questionnaire cancelled for {phone_number}")
        return send_whatsapp_message(phone_number, "‚ùå Question√°rio cancelado. Digite *gad7* se quiser tentar novamente.")
    else:
        return send_whatsapp_message(phone_number, "‚ÑπÔ∏è Nenhum question√°rio ativo para cancelar.")

def process_gad7_response(phone_number, response_text):
    """Processa resposta do GAD-7"""
    if phone_number not in questionnaire_states:
        return send_whatsapp_message(phone_number, "‚ùå Question√°rio n√£o encontrado. Digite *gad7* para iniciar.")
    
    state = questionnaire_states[phone_number]
    
    print(f"üîç Processing GAD-7 response from {phone_number}: '{response_text}'")
    
    # Validar resposta
    if response_text not in ['0', '1', '2', '3']:
        return send_whatsapp_message(phone_number, 
            f"‚ùå Resposta inv√°lida. Por favor, responda apenas: 0, 1, 2 ou 3\n\nOu digite *cancelar* para interromper.")
    
    # Salvar resposta
    state['responses'].append(int(response_text))
    current_q = state['current_question']
    
    print(f"‚úÖ Response {response_text} saved for question {current_q + 1}")
    
    # Feedback da resposta
    meaning = RESPONSE_MEANINGS[response_text]
    feedback = f"‚úÖ Registrado. Voc√™ assinalou: {response_text} - {meaning}"
    
    # Pr√≥xima pergunta ou resultado final
    state['current_question'] += 1
    
    print(f"üîÑ Updated state: question {state['current_question']}, total questions: {len(GAD7_QUESTIONS)}")
    
    if state['current_question'] < len(GAD7_QUESTIONS):
        # Pr√≥xima pergunta
        next_q = state['current_question']
        next_question = f"""

*PERGUNTA {next_q + 1}/7*

Nas √∫ltimas 2 semanas, com que frequ√™ncia voc√™ percebeu-se incomodado por:

*{GAD7_QUESTIONS[next_q]}*

Responda apenas o n√∫mero: 0, 1, 2 ou 3
(Digite *cancelar* para interromper)"""
        
        message = feedback + next_question
        print(f"üì§ Sending question {next_q + 1}/7 to {phone_number}")
        print(f"üìù Message content: {message[:100]}...")
        
        # Enviar mensagem e verificar resultado
        result = send_whatsapp_message(phone_number, message)
        print(f"üìä Message send result: {result}")
        return result
    else:
        # Calcular resultado final
        total_score = sum(state['responses'])
        
        # Categorizar resultado
        if total_score <= 4:
            category = "Ansiedade m√≠nima"
            interpretation = "Seus sintomas de ansiedade est√£o em um n√≠vel muito baixo."
        elif total_score <= 9:
            category = "Ansiedade leve"
            interpretation = "Voc√™ apresenta sintomas leves de ansiedade."
        elif total_score <= 14:
            category = "Ansiedade moderada"
            interpretation = "Voc√™ apresenta sintomas moderados de ansiedade. Considere conversar com um profissional."
        else:
            category = "Ansiedade severa"
            interpretation = "Voc√™ apresenta sintomas severos de ansiedade. √â recomendado buscar ajuda profissional."
        
        result_message = f"""

üìä *RESULTADO GAD-7*

*Pontua√ß√£o total:* {total_score}/21
*Categoria:* {category}

*Interpreta√ß√£o:* {interpretation}

*Suas respostas:*
"""
        
        for i, response in enumerate(state['responses']):
            result_message += f"Pergunta {i+1}: {response} - {RESPONSE_MEANINGS[str(response)]}\n"
        
        result_message += f"""
*Data:* {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

Obrigado por responder o question√°rio! üôè

Digite *gad7* para fazer um novo question√°rio."""
        
        message = feedback + result_message
        
        print(f"üìä GAD-7 completed. Score: {total_score}/21 - {category}")
        
        # Limpar estado
        del questionnaire_states[phone_number]
    
    return send_whatsapp_message(phone_number, message)


# VERS√ÉO DE EMERG√äNCIA - GAD-7 VIA TEXTO SIMPLES

def emergency_gad7_handler(phone_number, text_body):
    """Handler de emerg√™ncia para GAD-7 via texto simples"""
    text_lower = text_body.lower().strip()
    
    # Comandos especiais
    # Tentar handler de emerg√™ncia primeiro
    if emergency_gad7_handler(phone_number, text_body):
        return True
    
    if text_lower == 'gad7':
        # Enviar todas as perguntas de uma vez
        all_questions = """üìã *QUESTION√ÅRIO GAD-7 COMPLETO*

Responda TODAS as 7 perguntas abaixo com n√∫meros de 0 a 3:
‚Ä¢ 0 = Nenhuma vez
‚Ä¢ 1 = V√°rios dias  
‚Ä¢ 2 = Mais da metade dos dias
‚Ä¢ 3 = Quase todos os dias

*FORMATO DE RESPOSTA:* Digite os 7 n√∫meros separados por espa√ßo
Exemplo: 1 2 0 3 1 2 1

*PERGUNTAS:*

1. Sentir-se nervoso, ansioso ou muito tenso?
2. N√£o conseguir parar ou controlar as preocupa√ß√µes?
3. Preocupar-se muito com diversas coisas?
4. Ter dificuldade para relaxar?
5. Ficar t√£o agitado que se torna dif√≠cil permanecer parado?
6. Ficar facilmente aborrecido ou irritado?
7. Sentir medo como se algo terr√≠vel fosse acontecer?

*Responda com 7 n√∫meros separados por espa√ßo.*"""
        
        return send_whatsapp_message(phone_number, all_questions)
    
    # Verificar se √© resposta do GAD-7 (7 n√∫meros)
    if text_body.strip() and all(c.isdigit() or c.isspace() for c in text_body.strip()):
        numbers = text_body.strip().split()
        
        if len(numbers) == 7 and all(n in ['0', '1', '2', '3'] for n in numbers):
            # Processar resposta completa
            total_score = sum(int(n) for n in numbers)
            
            # Categorizar resultado
            if total_score <= 4:
                category = "Ansiedade m√≠nima"
                interpretation = "Seus sintomas de ansiedade est√£o em um n√≠vel muito baixo."
            elif total_score <= 9:
                category = "Ansiedade leve"
                interpretation = "Voc√™ apresenta sintomas leves de ansiedade."
            elif total_score <= 14:
                category = "Ansiedade moderada"
                interpretation = "Voc√™ apresenta sintomas moderados de ansiedade. Considere conversar com um profissional."
            else:
                category = "Ansiedade severa"
                interpretation = "Voc√™ apresenta sintomas severos de ansiedade. √â recomendado buscar ajuda profissional."
            
            result_message = f"""üìä *RESULTADO GAD-7*

*Suas respostas:* {' '.join(numbers)}
*Pontua√ß√£o total:* {total_score}/21
*Categoria:* {category}

*Interpreta√ß√£o:* {interpretation}

*Data:* {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

Obrigado por responder o question√°rio! üôè

Digite *gad7* para fazer um novo question√°rio."""
            
            return send_whatsapp_message(phone_number, result_message)
    
    return False


def process_text_message(phone_number, text_body):
    """Processa mensagens de texto"""
    text_lower = text_body.lower().strip()
    
    print(f"üìù Processing text: '{text_body}' from {phone_number}")
    
    # Comandos de cancelamento (prioridade m√°xima)
    if text_lower in ['cancelar', 'parar', 'sair', 'stop', 'cancel']:
        print(f"‚èπÔ∏è Cancel command received: {text_lower}")
        return cancel_questionnaire(phone_number)
    
    # Comandos espec√≠ficos
    # Tentar handler de emerg√™ncia primeiro
    if emergency_gad7_handler(phone_number, text_body):
        return True
    
    if text_lower == 'gad7':
        print("üìã GAD-7 questionnaire requested - STARTING DIRECTLY")
        return start_gad7_questionnaire(phone_number)
    
    # Se h√° question√°rio ativo, processar resposta
    elif phone_number in questionnaire_states:
        print(f"üîÑ Processing questionnaire response")
        return process_gad7_response(phone_number, text_body)
    
    # Mensagem de ajuda
    else:
        help_message = """üëã Ol√°! Sou o assistente da *Cl√≠nica Dr. Guilherme*.

*Comandos dispon√≠veis:*
‚Ä¢ Digite *gad7* para iniciar o question√°rio de ansiedade
‚Ä¢ Digite *cancelar* para interromper question√°rio em andamento

Como posso ajud√°-lo hoje?"""
        return send_whatsapp_message(phone_number, help_message)

@app.route("/")
def index():
    return jsonify({
        "service": "whatsapp-medical-bot",
        "status": "running",
        "version": "1.1.0",
        "features": ["gad7_questionnaire", "interactive_buttons", "cancel_commands"]
    })

@app.route("/health")
def health():
    return jsonify({
        "service": "whatsapp-medical-bot",
        "status": "healthy",
        "version": "1.1.0",
        "database": "ok",
        "admin_enabled": True,
        "whatsapp_configured": bool(WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID),
        "active_questionnaires": len(questionnaire_states)
    })

@app.route("/api/whatsapp/webhook", methods=["GET", "POST"])
def whatsapp_webhook():
    """Webhook do WhatsApp"""
    
    if request.method == "GET":
        # Verifica√ß√£o do webhook
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        
        print(f"üîç Webhook verification: mode={mode}, token={token}")
        
        if mode == "subscribe" and token == WHATSAPP_WEBHOOK_VERIFY_TOKEN:
            print("‚úÖ Webhook verified successfully")
            return challenge
        else:
            print("‚ùå Webhook verification failed")
            return "Verification failed", 403
    
    elif request.method == "POST":
        # Processar mensagem recebida
        try:
            data = request.get_json()
            print(f"üì• Webhook received: {json.dumps(data, indent=2)}")
            
            if not data or 'entry' not in data:
                return jsonify({"status": "ok"})
            
            for entry in data['entry']:
                if 'changes' not in entry:
                    continue
                    
                for change in entry['changes']:
                    if change.get('field') != 'messages':
                        continue
                    
                    value = change.get('value', {})
                    messages = value.get('messages', [])
                    
                    for message in messages:
                        # Extrair informa√ß√µes da mensagem
                        phone_number = message.get('from')
                        message_type = message.get('type')
                        
                        print(f"üì± Message from {phone_number}, type: {message_type}")
                        
                        if message_type == 'text':
                            text_body = message.get('text', {}).get('body', '').strip()
                            process_text_message(phone_number, text_body)
                        
                        elif message_type == 'interactive':
                            # Processar bot√µes interativos
                            interactive = message.get('interactive', {})
                            button_reply = interactive.get('button_reply', {})
                            button_id = button_reply.get('id')
                            
                            print(f"üîò Button pressed: {button_id}")
                            
                            if button_id == 'start_gad7':
                                print("üöÄ Starting GAD-7 questionnaire")
                                start_gad7_questionnaire(phone_number)
                            elif button_id == 'stop_gad7':
                                print("‚èπÔ∏è Stopping GAD-7")
                                cancel_questionnaire(phone_number)
            
            return jsonify({"status": "ok"})
            
        except Exception as e:
            print(f"üí• Error processing webhook: {e}")
            import traceback
            traceback.print_exc()
            return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/api/test/gad7/<phone_number>")
def test_gad7(phone_number):
    """Endpoint para testar GAD-7"""
    if send_gad7_invitation(phone_number):
        return jsonify({"status": "success", "message": f"GAD-7 invitation sent to {phone_number}"})
    else:
        return jsonify({"status": "error", "message": "Failed to send GAD-7 invitation"}), 500

@app.route("/api/debug/states")
def debug_states():
    """Debug endpoint para ver estados dos question√°rios"""
    return jsonify({
        "active_questionnaires": len(questionnaire_states),
        "states": {phone: {
            "type": state["type"],
            "current_question": state["current_question"],
            "responses_count": len(state["responses"]),
            "started_at": state["started_at"]
        } for phone, state in questionnaire_states.items()}
    })

@app.route("/api/debug/clear")
def clear_states():
    """Endpoint para limpar todos os estados (debug)"""
    global questionnaire_states
    count = len(questionnaire_states)
    questionnaire_states = {}
    return jsonify({"status": "success", "message": f"Cleared {count} questionnaire states"})

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    
    print(f"üöÄ Starting WhatsApp Medical Bot v1.1.0 on port {port}")
    print(f"üì± WhatsApp configured: {bool(WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID)}")
    print(f"üîó Webhook URL: https://web-production-4fc41.up.railway.app/api/whatsapp/webhook")
    print(f"üíä Health check: https://web-production-4fc41.up.railway.app/health")
    print(f"üêõ Debug states: https://web-production-4fc41.up.railway.app/api/debug/states")
    print(f"üßπ Clear states: https://web-production-4fc41.up.railway.app/api/debug/clear")
    
    app.run(host="0.0.0.0", port=port, debug=False)

@app.route("/api/test/send-direct/<phone_number>", methods=['POST'])
def test_send_direct(phone_number):
    """Endpoint para testar envio direto de mensagem"""
    try:
        data = request.get_json() or {}
        message = data.get('message', 'Teste de mensagem direta')
        
        print(f"üß™ TEST ENDPOINT: Sending message to {phone_number}")
        print(f"üìù Message: {message}")
        
        result = send_whatsapp_message(phone_number, message)
        
        return jsonify({
            "status": "success" if result else "failed",
            "message": f"Message {'sent' if result else 'failed'} to {phone_number}",
            "phone": phone_number,
            "text": message
        })
        
    except Exception as e:
        print(f"üí• Error in test endpoint: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

