name: ci-autofix-indent

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
  workflow_dispatch:

jobs:
  py-indent-autofix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Compile all .py and capture errors
        id: compile
        run: |
          python - <<'PY' || true
          import sys, subprocess, json, pathlib
          files = [p for p in pathlib.Path(".").rglob("*.py") if ".venv" not in str(p)]
          errs = []
          for p in files:
              try:
                  subprocess.check_output([sys.executable, "-m", "py_compile", str(p)], stderr=subprocess.STDOUT)
              except subprocess.CalledProcessError as e:
                  out = (e.output or b"").decode("utf-8", "ignore")
                  errs.append({"file": str(p), "log": out})
          pathlib.Path("py_errors.json").write_text(json.dumps(errs), encoding="utf-8")
          print(f"found_errors={len(errs)}")
          PY
          echo "count=$(jq 'length' py_errors.json)" >> "$GITHUB_OUTPUT"

      - name: Parse IndentationError locations
        id: parse
        run: |
          python - <<'PY'
          import json,re,sys
          data = json.loads(open("py_errors.json","r").read())
          targets=[]
          for e in data:
              log=e["log"]
              if "IndentationError" in log:
                  # achar 'File "X", line N'
                  m = re.search(r'File "([^"]+)", line (\d+)', log)
                  if m:
                      targets.append({"file":m.group(1), "line":int(m.group(2))})
          import pathlib
          pathlib.Path("indent_targets.json").write_text(json.dumps(targets), encoding="utf-8")
          print("targets", targets)
          PY
          echo "count=$(jq 'length' indent_targets.json)" >> "$GITHUB_OUTPUT"

      - name: Stop if no indentation targets
        if: ${{ steps.parse.outputs.count == '0' }}
        run: echo "No indentation errors to fix."

      - name: Ensure indent_fix.py
        if: ${{ steps.parse.outputs.count != '0' }}
        run: |
          mkdir -p scripts/autofix
          cat > scripts/autofix/indent_fix.py <<'PY'
          #!/usr/bin/env python3
          import sys, pathlib
          if len(sys.argv) < 3:
              print("usage: indent_fix.py <file> <line>", file=sys.stderr); sys.exit(2)
          p = pathlib.Path(sys.argv[1]); line_no = int(sys.argv[2])
          lines = p.read_text(encoding="utf-8", errors="ignore").splitlines()
          def ind(s): return len(s) - len(s.lstrip(" "))
          def is_code(line): 
              t=line.strip(); return t!="" and not t.startswith("#")
          idx = max(0, min(len(lines)-1, line_no-1))
          block_idx = idx-1
          while block_idx >= 0:
              s = lines[block_idx].rstrip()
              if is_code(s) and s.endswith(":"):
                  break
              block_idx -= 1
          target_indent = ind(lines[block_idx]) + 4 if block_idx >= 0 else 0
          lines[idx] = (" " * target_indent) + lines[idx].lstrip(" ")
          p.write_text("\n".join(lines) + ("\n" if not lines[-1].endswith("\n") else ""), encoding="utf-8")
          print(f"fixed {p}:{line_no} -> indent {target_indent}")
          PY
          chmod +x scripts/autofix/indent_fix.py

      - name: Apply fixes and open PR
        if: ${{ steps.parse.outputs.count != '0' }}
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: "autofix/indent-ci-${{ github.run_id }}"
          title: "Autofix (CI): normalize indentation"
          body: "Correção automática de indentação detectada no CI (py_compile)."
          labels: autofix/indentation
          commit-message: "autofix(ci): normalize indentation"
          add-paths: |
            **/*.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run indent fixer on branch (pre-PR)
        if: ${{ steps.parse.outputs.count != '0' }}
        run: |
          BR="autofix/indent-ci-${{ github.run_id }}"
          git fetch origin "$BR" && git checkout "$BR"
          jq -c '.[]' indent_targets.json | while read -r item; do
            f=$(echo "$item" | jq -r '.file'); ln=$(echo "$item" | jq -r '.line')
            echo "Fixing $f:$ln"
            python scripts/autofix/indent_fix.py "$f" "$ln" || true
          done
          git add -A
          git commit -m "autofix(ci): apply indentation fixes" || true
          git push origin "$BR" || true
